<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bupt.lams.mapper.RecordMapper">
    <sql id="Base_Column_List">
    id, operate, operateName, operatorName, operatorMail, text, operateTime
  </sql>
    <sql id="baseInfoQuery">
        <if test="id !=null">
            and r.id = #{id}
        </if>
        <if test="operate !=null">
            and r.operate = #{operate}
        </if>
        <if test="operatorMail !=null and operatorMail!=''">
            and r.operatorMail like concat('%',#{operatorMail},'%')
        </if>
        <if test="text !=null and text!=''">
            and r.text like concat('%',#{text},'%')
        </if>
        <if test="startDate !=null and endDate !=null">
            and r.operateTime between #{startDate} and #{endDate}
        </if>
    </sql>
    <select id="getRecordByCondition" parameterType="com.bupt.lams.dto.RecordQueryCondition"
            resultType="com.bupt.lams.model.Record">
        select r.*
        from
        record r
        <where>
            <include refid="baseInfoQuery"/>
        </where>
        <if test="page !=null and size!=null">
            limit #{page},#{size}
        </if>
    </select>
    <select id="getTotalByCondition" parameterType="com.bupt.lams.dto.RecordQueryCondition" resultType="java.lang.Long">
        select count(*)
        from
        record r
        <where>
            <include refid="baseInfoQuery"/>
        </where>
    </select>
    <select id="selectByPrimaryKey" resultType="com.bupt.lams.model.Record" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from record
        where id = #{id}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from record
    where id = #{id}
  </delete>
    <insert id="insertSelective" parameterType="com.bupt.lams.model.Record">
        insert into record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="operate != null">
                operate,
            </if>
            <if test="operateName != null and operateName != ''">
                operateName,
            </if>
            <if test="operatorName != null and operatorName != ''">
                operatorName,
            </if>
            <if test="operatorMail != null and operatorMail != ''">
                operatorMail,
            </if>
            <if test="text != null and text != ''">
                text,
            </if>
            <if test="operateTime != null">
                operateTime,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="operate != null">
                #{operate},
            </if>
            <if test="operateName != null and operateName != ''">
                #{operateName},
            </if>
            <if test="operatorName != null and operatorName != ''">
                #{operatorName},
            </if>
            <if test="operatorMail != null and operatorMail != ''">
                #{operatorMail},
            </if>
            <if test="text != null and text != ''">
                #{text},
            </if>
            <if test="operateTime != null">
                #{operateTime},
            </if>
        </trim>
    </insert>
</mapper>